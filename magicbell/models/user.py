# coding: utf-8

"""
    MagicBell REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from magicbell.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "external_id": "str",
        "email": "str",
        "first_name": "str",
        "last_name": "str",
        "custom_attributes": "object",
    }

    attribute_map = {
        "external_id": "external_id",
        "email": "email",
        "first_name": "first_name",
        "last_name": "last_name",
        "custom_attributes": "custom_attributes",
    }

    def __init__(
        self,
        external_id=None,
        email=None,
        first_name=None,
        last_name=None,
        custom_attributes=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._external_id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._custom_attributes = None
        self.discriminator = None

        if external_id is not None:
            self.external_id = external_id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes

    @property
    def external_id(self):
        """Gets the external_id of this User.  # noqa: E501

        A unique string that MagicBell can utilize to identify the user uniquely. We recommend setting this attribute to the ID of the user in your database. Provide the external id if the user's email is unavailable.  # noqa: E501

        :return: The external_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this User.

        A unique string that MagicBell can utilize to identify the user uniquely. We recommend setting this attribute to the ID of the user in your database. Provide the external id if the user's email is unavailable.  # noqa: E501

        :param external_id: The external_id of this User.  # noqa: E501
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        The user's email  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The user's email  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        The user's first name  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        The user's first name  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        The user's last name  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        The user's last name  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this User.  # noqa: E501

        Any customer attributes that you'd like to associate with the user. You may want to use these attributes later when writing email templates, for example.  # noqa: E501

        :return: The custom_attributes of this User.  # noqa: E501
        :rtype: object
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this User.

        Any customer attributes that you'd like to associate with the user. You may want to use these attributes later when writing email templates, for example.  # noqa: E501

        :param custom_attributes: The custom_attributes of this User.  # noqa: E501
        :type custom_attributes: object
        """

        self._custom_attributes = custom_attributes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], convert(item[1])), value.items())
                )
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
