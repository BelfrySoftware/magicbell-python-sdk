# coding: utf-8

"""
    MagicBell REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from magicbell.configuration import Configuration


class Recipient(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"email": "str", "external_id": "str", "matches": "str"}

    attribute_map = {
        "email": "email",
        "external_id": "external_id",
        "matches": "matches",
    }

    def __init__(
        self, email=None, external_id=None, matches=None, local_vars_configuration=None
    ):  # noqa: E501
        """Recipient - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._external_id = None
        self._matches = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if external_id is not None:
            self.external_id = external_id
        if matches is not None:
            self.matches = matches

    @property
    def email(self):
        """Gets the email of this Recipient.  # noqa: E501

        The user's email  # noqa: E501

        :return: The email of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Recipient.

        The user's email  # noqa: E501

        :param email: The email of this Recipient.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def external_id(self):
        """Gets the external_id of this Recipient.  # noqa: E501

        A unique string that MagicBell can utilize to uniquely identify the user. We recommend setting this attribute to the ID of the user in your database. Provide the external id if the user's email is unavailable.  # noqa: E501

        :return: The external_id of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Recipient.

        A unique string that MagicBell can utilize to uniquely identify the user. We recommend setting this attribute to the ID of the user in your database. Provide the external id if the user's email is unavailable.  # noqa: E501

        :param external_id: The external_id of this Recipient.  # noqa: E501
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def matches(self):
        """Gets the matches of this Recipient.  # noqa: E501

        An SQL-like expression to match users by their stored attributes. Set it to \"*\" to send a notification to all users.  # noqa: E501

        :return: The matches of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this Recipient.

        An SQL-like expression to match users by their stored attributes. Set it to \"*\" to send a notification to all users.  # noqa: E501

        :param matches: The matches of this Recipient.  # noqa: E501
        :type matches: str
        """

        self._matches = matches

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], convert(item[1])), value.items())
                )
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recipient):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Recipient):
            return True

        return self.to_dict() != other.to_dict()
