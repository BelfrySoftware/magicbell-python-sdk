# coding: utf-8

"""
    MagicBell REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from magicbell.configuration import Configuration


class PushSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"device_token": "str", "platform": "str", "app_bundle_id": "str"}

    attribute_map = {
        "device_token": "device_token",
        "platform": "platform",
        "app_bundle_id": "app_bundle_id",
    }

    def __init__(
        self,
        device_token=None,
        platform=None,
        app_bundle_id=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PushSubscription - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._device_token = None
        self._platform = None
        self._app_bundle_id = None
        self.discriminator = None

        self.device_token = device_token
        self.platform = platform
        if app_bundle_id is not None:
            self.app_bundle_id = app_bundle_id

    @property
    def device_token(self):
        """Gets the device_token of this PushSubscription.  # noqa: E501

        Token that identifies the device. This is usually generated automatically by your app once installed.  # noqa: E501

        :return: The device_token of this PushSubscription.  # noqa: E501
        :rtype: str
        """
        return self._device_token

    @device_token.setter
    def device_token(self, device_token):
        """Sets the device_token of this PushSubscription.

        Token that identifies the device. This is usually generated automatically by your app once installed.  # noqa: E501

        :param device_token: The device_token of this PushSubscription.  # noqa: E501
        :type device_token: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and device_token is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `device_token`, must not be `None`"
            )  # noqa: E501

        self._device_token = device_token

    @property
    def platform(self):
        """Gets the platform of this PushSubscription.  # noqa: E501

        The platform where the device token was generated from. This value is used to determine the delivery mechanism for mobile push notifications. Either 'ios', 'android' or 'safari'.  # noqa: E501

        :return: The platform of this PushSubscription.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this PushSubscription.

        The platform where the device token was generated from. This value is used to determine the delivery mechanism for mobile push notifications. Either 'ios', 'android' or 'safari'.  # noqa: E501

        :param platform: The platform of this PushSubscription.  # noqa: E501
        :type platform: str
        """
        if (
            self.local_vars_configuration.client_side_validation and platform is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `platform`, must not be `None`"
            )  # noqa: E501

        self._platform = platform

    @property
    def app_bundle_id(self):
        """Gets the app_bundle_id of this PushSubscription.  # noqa: E501

        The bundle ID of your app. This value is used to determine the delivery mechanism for mobile push notifications based on your workflow so that you can link several mobile applications to one project.  # noqa: E501

        :return: The app_bundle_id of this PushSubscription.  # noqa: E501
        :rtype: str
        """
        return self._app_bundle_id

    @app_bundle_id.setter
    def app_bundle_id(self, app_bundle_id):
        """Sets the app_bundle_id of this PushSubscription.

        The bundle ID of your app. This value is used to determine the delivery mechanism for mobile push notifications based on your workflow so that you can link several mobile applications to one project.  # noqa: E501

        :param app_bundle_id: The app_bundle_id of this PushSubscription.  # noqa: E501
        :type app_bundle_id: str
        """

        self._app_bundle_id = app_bundle_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], convert(item[1])), value.items())
                )
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PushSubscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PushSubscription):
            return True

        return self.to_dict() != other.to_dict()
