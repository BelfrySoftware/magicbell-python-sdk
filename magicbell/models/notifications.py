# coding: utf-8

"""
    MagicBell REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from magicbell.configuration import Configuration


class Notifications(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "project_id": "int",
        "total": "int",
        "per_page": "int",
        "total_pages": "int",
        "current_page": "int",
        "unseen_count": "int",
        "unread_count": "int",
        "notifications": "list[Notification]",
    }

    attribute_map = {
        "project_id": "project_id",
        "total": "total",
        "per_page": "per_page",
        "total_pages": "total_pages",
        "current_page": "current_page",
        "unseen_count": "unseen_count",
        "unread_count": "unread_count",
        "notifications": "notifications",
    }

    def __init__(
        self,
        project_id=None,
        total=None,
        per_page=None,
        total_pages=None,
        current_page=None,
        unseen_count=None,
        unread_count=None,
        notifications=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Notifications - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._project_id = None
        self._total = None
        self._per_page = None
        self._total_pages = None
        self._current_page = None
        self._unseen_count = None
        self._unread_count = None
        self._notifications = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if total is not None:
            self.total = total
        if per_page is not None:
            self.per_page = per_page
        if total_pages is not None:
            self.total_pages = total_pages
        if current_page is not None:
            self.current_page = current_page
        if unseen_count is not None:
            self.unseen_count = unseen_count
        if unread_count is not None:
            self.unread_count = unread_count
        if notifications is not None:
            self.notifications = notifications

    @property
    def project_id(self):
        """Gets the project_id of this Notifications.  # noqa: E501

        ID of the MagicBell project these notifications belong to.  # noqa: E501

        :return: The project_id of this Notifications.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Notifications.

        ID of the MagicBell project these notifications belong to.  # noqa: E501

        :param project_id: The project_id of this Notifications.  # noqa: E501
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def total(self):
        """Gets the total of this Notifications.  # noqa: E501

        Total number of notifications for this user.  # noqa: E501

        :return: The total of this Notifications.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Notifications.

        Total number of notifications for this user.  # noqa: E501

        :param total: The total of this Notifications.  # noqa: E501
        :type total: int
        """

        self._total = total

    @property
    def per_page(self):
        """Gets the per_page of this Notifications.  # noqa: E501

        Number of notifications per page.  # noqa: E501

        :return: The per_page of this Notifications.  # noqa: E501
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this Notifications.

        Number of notifications per page.  # noqa: E501

        :param per_page: The per_page of this Notifications.  # noqa: E501
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def total_pages(self):
        """Gets the total_pages of this Notifications.  # noqa: E501

        Total number of pages.  # noqa: E501

        :return: The total_pages of this Notifications.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this Notifications.

        Total number of pages.  # noqa: E501

        :param total_pages: The total_pages of this Notifications.  # noqa: E501
        :type total_pages: int
        """

        self._total_pages = total_pages

    @property
    def current_page(self):
        """Gets the current_page of this Notifications.  # noqa: E501

        Number of the page returned.  # noqa: E501

        :return: The current_page of this Notifications.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this Notifications.

        Number of the page returned.  # noqa: E501

        :param current_page: The current_page of this Notifications.  # noqa: E501
        :type current_page: int
        """

        self._current_page = current_page

    @property
    def unseen_count(self):
        """Gets the unseen_count of this Notifications.  # noqa: E501

        Number of unseen notifications. Any filters applied affect this number.  # noqa: E501

        :return: The unseen_count of this Notifications.  # noqa: E501
        :rtype: int
        """
        return self._unseen_count

    @unseen_count.setter
    def unseen_count(self, unseen_count):
        """Sets the unseen_count of this Notifications.

        Number of unseen notifications. Any filters applied affect this number.  # noqa: E501

        :param unseen_count: The unseen_count of this Notifications.  # noqa: E501
        :type unseen_count: int
        """

        self._unseen_count = unseen_count

    @property
    def unread_count(self):
        """Gets the unread_count of this Notifications.  # noqa: E501

        Number of unread notifications. Any filters applied affect this number.  # noqa: E501

        :return: The unread_count of this Notifications.  # noqa: E501
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this Notifications.

        Number of unread notifications. Any filters applied affect this number.  # noqa: E501

        :param unread_count: The unread_count of this Notifications.  # noqa: E501
        :type unread_count: int
        """

        self._unread_count = unread_count

    @property
    def notifications(self):
        """Gets the notifications of this Notifications.  # noqa: E501

        List of all notifications in the current page  # noqa: E501

        :return: The notifications of this Notifications.  # noqa: E501
        :rtype: list[Notification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this Notifications.

        List of all notifications in the current page  # noqa: E501

        :param notifications: The notifications of this Notifications.  # noqa: E501
        :type notifications: list[Notification]
        """

        self._notifications = notifications

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], convert(item[1])), value.items())
                )
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notifications):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Notifications):
            return True

        return self.to_dict() != other.to_dict()
