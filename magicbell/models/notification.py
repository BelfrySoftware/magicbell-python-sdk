# coding: utf-8

"""
    MagicBell REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from magicbell.configuration import Configuration


class Notification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "title": "str",
        "category": "str",
        "content": "str",
        "action_url": "str",
        "recipients": "list[Recipient]",
        "custom_attributes": "dict(str, object)",
        "topic": "str",
        "overrides": "NotificationOverrides",
    }

    attribute_map = {
        "title": "title",
        "category": "category",
        "content": "content",
        "action_url": "action_url",
        "recipients": "recipients",
        "custom_attributes": "custom_attributes",
        "topic": "topic",
        "overrides": "overrides",
    }

    def __init__(
        self,
        title=None,
        category=None,
        content=None,
        action_url=None,
        recipients=None,
        custom_attributes=None,
        topic=None,
        overrides=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Notification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._category = None
        self._content = None
        self._action_url = None
        self._recipients = None
        self._custom_attributes = None
        self._topic = None
        self._overrides = None
        self.discriminator = None

        self.title = title
        self.category = category
        self.content = content
        self.action_url = action_url
        self.recipients = recipients
        self.custom_attributes = custom_attributes
        self.topic = topic
        self.overrides = overrides

    @property
    def title(self):
        """Gets the title of this Notification.  # noqa: E501

        Title of the notification.  # noqa: E501

        :return: The title of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Notification.

        Title of the notification.  # noqa: E501

        :param title: The title of this Notification.  # noqa: E501
        :type title: str
        """
        if (
            self.local_vars_configuration.client_side_validation and title is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `title`, must not be `None`"
            )  # noqa: E501

        self._title = title

    @property
    def category(self):
        """Gets the category of this Notification.  # noqa: E501

        Category the notification belongs to. This is useful to allow users to set their preferences.  # noqa: E501

        :return: The category of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Notification.

        Category the notification belongs to. This is useful to allow users to set their preferences.  # noqa: E501

        :param category: The category of this Notification.  # noqa: E501
        :type category: str
        """

        self._category = category

    @property
    def content(self):
        """Gets the content of this Notification.  # noqa: E501

        Content of the notification. If you provide HTML content, the notification inbox will render it correctly.  # noqa: E501

        :return: The content of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Notification.

        Content of the notification. If you provide HTML content, the notification inbox will render it correctly.  # noqa: E501

        :param content: The content of this Notification.  # noqa: E501
        :type content: str
        """

        self._content = content

    @property
    def action_url(self):
        """Gets the action_url of this Notification.  # noqa: E501

        A URL to redirect the user to when they click the notification in their notification inbox.  # noqa: E501

        :return: The action_url of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._action_url

    @action_url.setter
    def action_url(self, action_url):
        """Sets the action_url of this Notification.

        A URL to redirect the user to when they click the notification in their notification inbox.  # noqa: E501

        :param action_url: The action_url of this Notification.  # noqa: E501
        :type action_url: str
        """

        self._action_url = action_url

    @property
    def recipients(self):
        """Gets the recipients of this Notification.  # noqa: E501


        :return: The recipients of this Notification.  # noqa: E501
        :rtype: list[Recipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this Notification.


        :param recipients: The recipients of this Notification.  # noqa: E501
        :type recipients: list[Recipient]
        """
        if (
            self.local_vars_configuration.client_side_validation and recipients is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `recipients`, must not be `None`"
            )  # noqa: E501

        self._recipients = recipients

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Notification.  # noqa: E501

        Set of key-value pairs that you can attach to a notification. It accepts objects for the value of a key.  You can use it to share data between channels or to render a custom UI.  # noqa: E501

        :return: The custom_attributes of this Notification.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Notification.

        Set of key-value pairs that you can attach to a notification. It accepts objects for the value of a key.  You can use it to share data between channels or to render a custom UI.  # noqa: E501

        :param custom_attributes: The custom_attributes of this Notification.  # noqa: E501
        :type custom_attributes: dict(str, object)
        """

        self._custom_attributes = custom_attributes

    @property
    def topic(self):
        """Gets the topic of this Notification.  # noqa: E501

        Topic the notification belongs to. This is useful to create threads.  # noqa: E501

        :return: The topic of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Notification.

        Topic the notification belongs to. This is useful to create threads.  # noqa: E501

        :param topic: The topic of this Notification.  # noqa: E501
        :type topic: str
        """

        self._topic = topic

    @property
    def overrides(self):
        """Gets the overrides of this Notification.  # noqa: E501


        :return: The overrides of this Notification.  # noqa: E501
        :rtype: NotificationOverrides
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this Notification.


        :param overrides: The overrides of this Notification.  # noqa: E501
        :type overrides: NotificationOverrides
        """

        self._overrides = overrides

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], convert(item[1])), value.items())
                )
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Notification):
            return True

        return self.to_dict() != other.to_dict()
